<?xml version="1.0" encoding="UTF-8" ?>
<claims xmlns:gate="http://www.gate.ac.uk" gate:gateId="0" gate:annotMaxId="5487" id="claims" numberDependentClaims="0" numberIndependentClaims="266">
<claim gate:gateId="1" id="CLM-00001" body="execution of computer readable program code by a processor of a host that transmits data to a client, the method comprising:
(a1) determining a host key K n using a one-way hash function based on a host initial key K 0 stored in the host, wherein n is an integer having an initial value 1;
(a2) generating encrypted data X n using a symmetrical encryption algorithm based on original data R n and the host key K n ;
(a3) sending the encrypted data X n to the client, wherein the client stores a client initial key K′ 0 and determines a client key K′ n using the one-way hash function based on the client initial key K′ 0 ;
(a4) receiving validation data X′ n sent from the client, and decrypting the validation data X′ n using a symmetrical decryption algorithm and the host key K n to obtain decrypted data R′ n ;
(a5) checking if the decrypted data R′ n is the same as the original data Rn, and determining that the client fails in the validation, refusing to transmit any more data, and ending the procedure if the decrypted data R′ n is different from the original data R n , or going to block (a6) if the decrypted data R′ n is the same as the original data R n ; and
(a6) setting that the client key K′ n−1 equals the host key K n−1 , and returning to block (a2) if there is original data R n+1 to be transmitted, or ending the procedure if there is no more data to be transmitted.

" num="00001" claimType="independent" transPhrase=" being performed by " claimSize="332" claimNumber="1" claim_preamble="A computer-based data security protection method">
<claim-text gate:gateId="2">1. A computer-based data security protection method being performed by execution of computer readable program code by a processor of a host that transmits data to a client, the method comprising:
<claim-text gate:gateId="3">(a1) determining a host key K <sub gate:gateId="4">n </sub>using a one-way hash function based on a host initial key K <sub gate:gateId="5">0 </sub>stored in the host, wherein n is an integer having an initial value 1;</claim-text>
<claim-text gate:gateId="6">(a2) generating encrypted data X <sub gate:gateId="7">n </sub>using a symmetrical encryption algorithm based on original data R <sub gate:gateId="8">n </sub>and the host key K <sub gate:gateId="9">n</sub> ;</claim-text>
<claim-text gate:gateId="10">(a3) sending the encrypted data X <sub gate:gateId="11">n </sub>to the client, wherein the client stores a client initial key K′ <sub gate:gateId="12">0 </sub>and determines a client key K′ <sub gate:gateId="13">n </sub>using the one-way hash function based on the client initial key K′ <sub gate:gateId="14">0</sub> ;</claim-text>
<claim-text gate:gateId="15">(a4) receiving validation data X′ <sub gate:gateId="16">n </sub>sent from the client, and decrypting the validation data X′ <sub gate:gateId="17">n </sub>using a symmetrical decryption algorithm and the host key K <sub gate:gateId="18">n </sub>to obtain decrypted data R′ <sub gate:gateId="19">n</sub> ;</claim-text>
<claim-text gate:gateId="20">(a5) checking if the decrypted data R′ <sub gate:gateId="21">n </sub>is the same as the original data Rn, and determining that the client fails in the validation, refusing to transmit any more data, and ending the procedure if the decrypted data R′ <sub gate:gateId="22">n </sub>is different from the original data R <sub gate:gateId="23">n</sub> , or going to block (a6) if the decrypted data R′ <sub gate:gateId="24">n </sub>is the same as the original data R <sub gate:gateId="25">n</sub> ; and</claim-text>
<claim-text gate:gateId="26">(a6) setting that the client key K′ <sub gate:gateId="27">n−1 </sub>equals the host key K <sub gate:gateId="28">n−1</sub> , and returning to block (a2) if there is original data R <sub gate:gateId="29">n+1 </sub>to be transmitted, or ending the procedure if there is no more data to be transmitted.</claim-text>
</claim-text>
</claim>
<claim gate:gateId="30" id="CLM-00002" body="execution of computer readable program code by a processor of a client that receives data from a host, the method comprising:
(b1) receiving encrypted data X n sent from the host, wherein n is an integer having an initial value 1;
(b2) determining a client key K′ n using a one-way hash function based on a client initial key K′ 0 stored in the client;
(b3) determining decrypted data R′ n by decrypting the encrypted data X n using a symmetrical decryption algorithm based on the client key K′ n ;
(b4) generating validation data X′ n using the symmetrical encryption algorithm based on the decrypted data R′ n and the client key K′ n ; and
(b5) sending the validation data X′ n to the host, to request the host to validate the client based on the validation data X′ n for transmission of more data.

" num="00002" claimType="independent" transPhrase=" being performed by " claimSize="189" claimNumber="2" claim_preamble="A computer-based data security protection method">
<claim-text gate:gateId="31">2. A computer-based data security protection method being performed by execution of computer readable program code by a processor of a client that receives data from a host, the method comprising:
<claim-text gate:gateId="32">(b1) receiving encrypted data X <sub gate:gateId="33">n </sub>sent from the host, wherein n is an integer having an initial value 1;</claim-text>
<claim-text gate:gateId="34">(b2) determining a client key K′ <sub gate:gateId="35">n </sub>using a one-way hash function based on a client initial key K′ <sub gate:gateId="36">0 </sub>stored in the client;</claim-text>
<claim-text gate:gateId="37">(b3) determining decrypted data R′ <sub gate:gateId="38">n </sub>by decrypting the encrypted data X <sub gate:gateId="39">n </sub>using a symmetrical decryption algorithm based on the client key K′ <sub gate:gateId="40">n</sub> ;</claim-text>
<claim-text gate:gateId="41">(b4) generating validation data X′ <sub gate:gateId="42">n </sub>using the symmetrical encryption algorithm based on the decrypted data R′ <sub gate:gateId="43">n </sub>and the client key K′ <sub gate:gateId="44">n</sub> ; and</claim-text>
<claim-text gate:gateId="45">(b5) sending the validation data X′ <sub gate:gateId="46">n </sub>to the host, to request the host to validate the client based on the validation data X′ <sub gate:gateId="47">n </sub>for transmission of more data.</claim-text>
</claim-text>
</claim>
<claim gate:gateId="48" id="CLM-00003" body="block (a1) further comprising: (a0) performing initial validation of the host and the client, to generate the host initial key K 0 and the client initial key K′ 0 .
" claimType="dependent" num="00003" claimBackReference="of claim 1" transPhrase=", before " claimSize="51" claim_preamble="The data security protection method" claimNumber="3" depends_on="1">
<claim-text gate:gateId="49">3. The data security protection method of <claim-ref gate:gateId="50" idref="CLM-00001">claim 1</claim-ref> , before block (a1) further comprising: (a0) performing initial validation of the host and the client, to generate the host initial key K <sub gate:gateId="51">0 </sub>and the client initial key K′ <sub gate:gateId="52">0</sub> .</claim-text>
</claim>
<claim gate:gateId="53" id="CLM-00004" body="block (a0) comprises:
(a01) generating a first random number R 0 and a second random number K 0 , determining a one-way function value H(R 0 ) of the first random number R 0 , and generating test data X 0 by encrypting R 0 , K 0 and H(R 0 ) using a public key PK of an asymmetric encryption algorithm by the client;
(a02) sending the test data X 0 to the client;
(a03) decrypting the test data X 0 using a secret key SK of the asymmetric encrypted algorithm, to obtain a first decrypted value R′ 0 , a second decrypted value K′ 0 , and a decrypted function value H(R′ 0 ) of the first decrypted value R′ 0 ;
(a04) determining a one-way function value H′(R′ 0 ) of the first decrypted value R′ 0 using the one-way hash function;
(a05) checking if the one-way function value H′(R′ 0 ) is the same as the decrypted function value H(R′ 0 ), to determine if the public key PK matches the private key SK;
(a06) determining that the host fails in the initial validation and ending the procedure if the one-way function value H′(R′ 0 ) is different from the decrypted function value H(R′ 0 ), or going to block (a07) if the one-way function value H′(R′ 0 ) is the same as the decrypted function value H(R′ 0 );
(a07) determining that the public key PK matches the private key SK, and storing the second decrypted value K′ 0 in the client as the client initial key;
(a08) encrypting the first decrypted value R′ 0 using the symmetric encryption algorithm and the client initial key K′ 0 , to obtain an encrypted value E(R′ 0 ), and sending the encrypted value E(R′ 0 ) to the host;
(a09) obtaining the first decrypted value R′ 0 by decrypting the encrypted value E(R′ 0 ) using the symmetric decryption algorithm and the client initial key K′ 0 ;
(a10) checking if the first decryption value R′ 0 is the same as the first random number R 0 , to determine if the client passes the initial validation;
(a11) determining the client fails in the initial validation and ending the procedure if the first decrypted value R′ 0 is different from the first random number R 0 , or going to block (a12) if the first decrypted value R′ 0 is the same as the first random number R 0 ; and
(a12) determining that the client passes the initial validation, storing the second random number K 0 in the host as the host initial key, and going to block (a1).

" claimType="dependent" num="00004" claimBackReference="of claim 3" transPhrase=", wherein " claimSize="573" claim_preamble="The data security protection method" claimNumber="4" depends_on="3">
<claim-text gate:gateId="54">4. The data security protection method of <claim-ref gate:gateId="55" idref="CLM-00003">claim 3</claim-ref> , wherein block (a0) comprises:
<claim-text gate:gateId="56">(a01) generating a first random number R <sub gate:gateId="57">0 </sub>and a second random number K <sub gate:gateId="58">0</sub> , determining a one-way function value H(R <sub gate:gateId="59">0</sub> ) of the first random number R <sub gate:gateId="60">0</sub> , and generating test data X <sub gate:gateId="61">0 </sub>by encrypting R <sub gate:gateId="62">0</sub> , K <sub gate:gateId="63">0 </sub>and H(R <sub gate:gateId="64">0</sub> ) using a public key PK of an asymmetric encryption algorithm by the client;</claim-text>
<claim-text gate:gateId="65">(a02) sending the test data X <sub gate:gateId="66">0 </sub>to the client;</claim-text>
<claim-text gate:gateId="67">(a03) decrypting the test data X <sub gate:gateId="68">0 </sub>using a secret key SK of the asymmetric encrypted algorithm, to obtain a first decrypted value R′ <sub gate:gateId="69">0</sub> , a second decrypted value K′ <sub gate:gateId="70">0</sub> , and a decrypted function value H(R′ <sub gate:gateId="71">0</sub> ) of the first decrypted value R′ <sub gate:gateId="72">0</sub> ;</claim-text>
<claim-text gate:gateId="73">(a04) determining a one-way function value H′(R′ <sub gate:gateId="74">0</sub> ) of the first decrypted value R′ <sub gate:gateId="75">0 </sub>using the one-way hash function;</claim-text>
<claim-text gate:gateId="76">(a05) checking if the one-way function value H′(R′ <sub gate:gateId="77">0</sub> ) is the same as the decrypted function value H(R′ <sub gate:gateId="78">0</sub> ), to determine if the public key PK matches the private key SK;</claim-text>
<claim-text gate:gateId="79">(a06) determining that the host fails in the initial validation and ending the procedure if the one-way function value H′(R′ <sub gate:gateId="80">0</sub> ) is different from the decrypted function value H(R′ <sub gate:gateId="81">0</sub> ), or going to block (a07) if the one-way function value H′(R′ <sub gate:gateId="82">0</sub> ) is the same as the decrypted function value H(R′ <sub gate:gateId="83">0</sub> );</claim-text>
<claim-text gate:gateId="84">(a07) determining that the public key PK matches the private key SK, and storing the second decrypted value K′ <sub gate:gateId="85">0 </sub>in the client as the client initial key;</claim-text>
<claim-text gate:gateId="86">(a08) encrypting the first decrypted value R′ <sub gate:gateId="87">0 </sub>using the symmetric encryption algorithm and the client initial key K′ <sub gate:gateId="88">0</sub> , to obtain an encrypted value E(R′ <sub gate:gateId="89">0</sub> ), and sending the encrypted value E(R′ <sub gate:gateId="90">0</sub> ) to the host;</claim-text>
<claim-text gate:gateId="91">(a09) obtaining the first decrypted value R′ <sub gate:gateId="92">0 </sub>by decrypting the encrypted value E(R′ <b gate:gateId="93">0</b> ) using the symmetric decryption algorithm and the client initial key K′ <b gate:gateId="94">0</b> ;</claim-text>
<claim-text gate:gateId="95">(a10) checking if the first decryption value R′ <sub gate:gateId="96">0 </sub>is the same as the first random number R <b gate:gateId="97">0</b> , to determine if the client passes the initial validation;</claim-text>
<claim-text gate:gateId="98">(a11) determining the client fails in the initial validation and ending the procedure if the first decrypted value R′ <sub gate:gateId="99">0 </sub>is different from the first random number R <b gate:gateId="100">0</b> , or going to block (a12) if the first decrypted value R′ <sub gate:gateId="101">0 </sub>is the same as the first random number R <sub gate:gateId="102">0</sub> ; and</claim-text>
<claim-text gate:gateId="103">(a12) determining that the client passes the initial validation, storing the second random number K <sub gate:gateId="104">0 </sub>in the host as the host initial key, and going to block (a1).</claim-text>
</claim-text>
</claim>
<claim gate:gateId="105" id="CLM-00005" body="the one-way hash function is selected from the group consisting of a message digest algorithm (MD5), a secure hash algorithm (SHA), a message authentication code (MAC), and a cyclic redundancy check (CRC).
" claimType="dependent" num="00005" claimBackReference="of claim 1" transPhrase=", wherein " claimSize="57" claim_preamble="The data security protection method" claimNumber="5" depends_on="1">
<claim-text gate:gateId="106">5. The data security protection method of <claim-ref gate:gateId="107" idref="CLM-00001">claim 1</claim-ref> , wherein the one-way hash function is selected from the group consisting of a message digest algorithm (MD5), a secure hash algorithm (SHA), a message authentication code (MAC), and a cyclic redundancy check (CRC).</claim-text>
</claim>
<claim gate:gateId="108" id="CLM-00006" body="the symmetrical encryption algorithm is an advanced encryption standard (AES), or a data encryption standard (DES).
" claimType="dependent" num="00006" claimBackReference="of claim 1" transPhrase=", wherein " claimSize="34" claim_preamble="The data security protection method" claimNumber="6" depends_on="1">
<claim-text gate:gateId="109">6. The data security protection method of <claim-ref gate:gateId="110" idref="CLM-00001">claim 1</claim-ref> , wherein the symmetrical encryption algorithm is an advanced encryption standard (AES), or a data encryption standard (DES).</claim-text>
</claim>
<claim gate:gateId="111" id="CLM-00007" body="a set of instructions, the set of instructions capable of being executed by a processor of a host that transmits data to a client to perform a data security protection method, the method comprising:
(a1) determining a host key K n using a one-way hash function based on a host initial key K 0 stored in the host, wherein n is an integer having an initial value 1;
(a2) generating encrypted data X n using a symmetrical encryption algorithm based on original data R n and the host key K n ;
(a3) sending the encryption data X n to the client, wherein the client stores a client initial key K′ 0 and determines a client key K′ n using the one-way hash function based on the client initial key K′ 0 ;
(a4) receiving validation data X′ n sent from the client, and decrypting the validation data X′ n using a symmetrical decryption algorithm and the host key K n to obtain decrypted data R′ n ;
(a5) checking if the decrypted data R′ n is the same as the original data R n , determining that the client fails in the validation, refusing to transmit any more data, and ending the procedure in response to a determination that the decrypted data R′ n is different from the original data R n , or going to block (a6) if the decryption data R′ n is the same as the original data R n ; and
(a6) setting the client key K′ n−1 equals the host key K n−1 , and returning to block (a2) if there is original data R n+1 to be transmitted, or ending the procedure if there is no more data to be transmitted.

" num="00007" claimType="independent" transPhrase=" " claimSize="347" claimNumber="7" claim_preamble="A non-transitory computer readable medium storing">
<claim-text gate:gateId="112">7. A non-transitory computer readable medium storing a set of instructions, the set of instructions capable of being executed by a processor of a host that transmits data to a client to perform a data security protection method, the method comprising:
<claim-text gate:gateId="113">(a1) determining a host key K <sub gate:gateId="114">n </sub>using a one-way hash function based on a host initial key K <sub gate:gateId="115">0 </sub>stored in the host, wherein n is an integer having an initial value 1;</claim-text>
<claim-text gate:gateId="116">(a2) generating encrypted data X <sub gate:gateId="117">n </sub>using a symmetrical encryption algorithm based on original data R <sub gate:gateId="118">n </sub>and the host key K <sub gate:gateId="119">n</sub> ;</claim-text>
<claim-text gate:gateId="120">(a3) sending the encryption data X <sub gate:gateId="121">n </sub>to the client, wherein the client stores a client initial key K′ <sub gate:gateId="122">0 </sub>and determines a client key K′ <sub gate:gateId="123">n </sub>using the one-way hash function based on the client initial key K′ <sub gate:gateId="124">0</sub> ;</claim-text>
<claim-text gate:gateId="125">(a4) receiving validation data X′ <sub gate:gateId="126">n </sub>sent from the client, and decrypting the validation data X′ <sub gate:gateId="127">n </sub>using a symmetrical decryption algorithm and the host key K <sub gate:gateId="128">n </sub>to obtain decrypted data R′ <sub gate:gateId="129">n</sub> ;</claim-text>
<claim-text gate:gateId="130">(a5) checking if the decrypted data R′ <sub gate:gateId="131">n </sub>is the same as the original data R <sub gate:gateId="132">n</sub> , determining that the client fails in the validation, refusing to transmit any more data, and ending the procedure in response to a determination that the decrypted data R′ <sub gate:gateId="133">n </sub>is different from the original data R <sub gate:gateId="134">n</sub> , or going to block (a6) if the decryption data R′ <sub gate:gateId="135">n </sub>is the same as the original data R <sub gate:gateId="136">n</sub> ; and</claim-text>
<claim-text gate:gateId="137">(a6) setting the client key K′ <sub gate:gateId="138">n−1 </sub>equals the host key K <sub gate:gateId="139">n−1</sub> , and returning to block (a2) if there is original data R <sub gate:gateId="140">n+1 </sub>to be transmitted, or ending the procedure if there is no more data to be transmitted.</claim-text>
</claim-text>
</claim>
<claim gate:gateId="141" id="CLM-00008" body="a set of instructions, the set of instructions capable of being executed by a processor of a client that receives data from a host to perform a data security protection method, the method comprising:
(b1) receiving encrypted data X n sent from the host, wherein n is an integer having an initial value 1;
(b2) determining a client key K′ n using a one-way hash function based on a client initial key K′ 0 stored in the client;
(b3) determining decrypted data R′ n by decrypting the encrypted data X n using a symmetrical decryption algorithm based on the client key K′ n ;
(b4) generating validation data X′ n using the symmetrical encryption algorithm based on the decrypted data R′ n and the client key K′ n ; and
(b5) sending the validation data X′ n to the host, to request the host to validate the client based on the validation data X′ n for transmission of more data.

" num="00008" claimType="independent" transPhrase=" " claimSize="200" claimNumber="8" claim_preamble="A non-transitory computer readable medium storing">
<claim-text gate:gateId="142">8. A non-transitory computer readable medium storing a set of instructions, the set of instructions capable of being executed by a processor of a client that receives data from a host to perform a data security protection method, the method comprising:
<claim-text gate:gateId="143">(b1) receiving encrypted data X <sub gate:gateId="144">n </sub>sent from the host, wherein n is an integer having an initial value 1;</claim-text>
<claim-text gate:gateId="145">(b2) determining a client key K′ <sub gate:gateId="146">n </sub>using a one-way hash function based on a client initial key K′ <sub gate:gateId="147">0 </sub>stored in the client;</claim-text>
<claim-text gate:gateId="148">(b3) determining decrypted data R′ <sub gate:gateId="149">n </sub>by decrypting the encrypted data X <sub gate:gateId="150">n </sub>using a symmetrical decryption algorithm based on the client key K′ <sub gate:gateId="151">n</sub> ;</claim-text>
<claim-text gate:gateId="152">(b4) generating validation data X′ <sub gate:gateId="153">n </sub>using the symmetrical encryption algorithm based on the decrypted data R′ <sub gate:gateId="154">n </sub>and the client key K′ <sub gate:gateId="155">n</sub> ; and</claim-text>
<claim-text gate:gateId="156">(b5) sending the validation data X′ <sub gate:gateId="157">n </sub>to the host, to request the host to validate the client based on the validation data X′ <sub gate:gateId="158">n </sub>for transmission of more data.</claim-text>
</claim-text>
</claim>
<claim gate:gateId="159" id="CLM-00009" body="block (a1) further comprises: (a0) performing initial validation of the host and the client, to generate the host initial key K 0 and the client initial key K′ 0 .
" claimType="dependent" num="00009" claimBackReference="of claim 7" transPhrase=", wherein before " claimSize="52" claim_preamble="The non-transitory computer readable medium" claimNumber="9" depends_on="7">
<claim-text gate:gateId="160">9. The non-transitory computer readable medium of <claim-ref gate:gateId="161" idref="CLM-00007">claim 7</claim-ref> , wherein before block (a1) further comprises: (a0) performing initial validation of the host and the client, to generate the host initial key K <sub gate:gateId="162">0 </sub>and the client initial key K′ <sub gate:gateId="163">0</sub> .</claim-text>
</claim>
<claim gate:gateId="164" id="CLM-00010" body="block (a0) comprises:
(a01) generating a first random number R 0 and a second random number K 0 , determining a one-way function value H(R 0 ) of the first random number R 0 , and generating test data X 0 by encrypting R 0 , K 0 and H(R 0 ) using a public key PK of an asymmetric encryption algorithm by the client;
(a02) sending the test data X 0 to the client;
(a03) decrypting the test data X 0 using a secret key SK of the asymmetric encryption algorithm, to obtain a first decrypted value R′ 0 , a second decrypted value K′ 0 , and a decrypted function value H(R′ 0 ) of the first decrypted value R′ 0 ;
(a04) determining a one-way function value H′(R′ 0 ) of the first decrypted value R′ 0 using the one-way hash function;
(a05) checking if the one-way function value H′(R′ 0 ) is the same as the decrypted function value H(R′ 0 ), to determine if the public key PK matches the private key SK;
(a06) determining that the host fails in the initial validation and ending the procedure if the one-way function value H′(R′ 0 ) is different from the decrypted function value H(R′ 0 ), or going to block (a07) if the one-way function value H′(R′ 0 ) is the same as the decrypted function value H(R′ 0 );
(a07) determining that the public key PK matches the private key SK, and storing the second decrypted value K′ 0 in the client as the client initial key;
(a08) encrypting the first decrypted value R′ 0 using the symmetric encryption algorithm and the client initial key K′ 0 , to obtain an encrypted value E(R′ 0 ), and sending the encrypted value E(R′ 0 ) to the host;
(a09) obtaining the first decrypted value R′ 0 by decrypting the encrypted value E(R′ 0 ) using the symmetric decryption algorithm and the client initial key K′ 0 ;
(a10) checking if the first decrypted value R′ 0 is the same as the first random number R 0 , to determine if the client passes the initial validation;
(a11) determining the client fails in the initial validation and ending the procedure if the first decrypted value R′ 0 is different from the first random number R 0 , or going to block (a12) if the first decrypted value R′ 0 is the same as the first random number R 0 ; and
(a12) determining that the client passes the initial validation, storing the second random number K 0 in the host as the host initial key, and going to block (a1).

" claimType="dependent" num="00010" claimBackReference="of claim 9" transPhrase=", wherein " claimSize="573" claim_preamble="The non-transitory computer readable medium" claimNumber="10" depends_on="9">
<claim-text gate:gateId="165">10. The non-transitory computer readable medium of <claim-ref gate:gateId="166" idref="CLM-00009">claim 9</claim-ref> , wherein block (a0) comprises:
<claim-text gate:gateId="167">(a01) generating a first random number R <sub gate:gateId="168">0 </sub>and a second random number K <sub gate:gateId="169">0</sub> , determining a one-way function value H(R <sub gate:gateId="170">0</sub> ) of the first random number R <sub gate:gateId="171">0</sub> , and generating test data X <sub gate:gateId="172">0 </sub>by encrypting R <sub gate:gateId="173">0</sub> , K <sub gate:gateId="174">0 </sub>and H(R <sub gate:gateId="175">0</sub> ) using a public key PK of an asymmetric encryption algorithm by the client;</claim-text>
<claim-text gate:gateId="176">(a02) sending the test data X <sub gate:gateId="177">0 </sub>to the client;</claim-text>
<claim-text gate:gateId="178">(a03) decrypting the test data X <sub gate:gateId="179">0 </sub>using a secret key SK of the asymmetric encryption algorithm, to obtain a first decrypted value R′ <sub gate:gateId="180">0</sub> , a second decrypted value K′ <sub gate:gateId="181">0</sub> , and a decrypted function value H(R′ <sub gate:gateId="182">0</sub> ) of the first decrypted value R′ <sub gate:gateId="183">0</sub> ;</claim-text>
<claim-text gate:gateId="184">(a04) determining a one-way function value H′(R′ <sub gate:gateId="185">0</sub> ) of the first decrypted value R′ <sub gate:gateId="186">0 </sub>using the one-way hash function;</claim-text>
<claim-text gate:gateId="187">(a05) checking if the one-way function value H′(R′ <sub gate:gateId="188">0</sub> ) is the same as the decrypted function value H(R′ <sub gate:gateId="189">0</sub> ), to determine if the public key PK matches the private key SK;</claim-text>
<claim-text gate:gateId="190">(a06) determining that the host fails in the initial validation and ending the procedure if the one-way function value H′(R′ <sub gate:gateId="191">0</sub> ) is different from the decrypted function value H(R′ <sub gate:gateId="192">0</sub> ), or going to block (a07) if the one-way function value H′(R′ <sub gate:gateId="193">0</sub> ) is the same as the decrypted function value H(R′ <sub gate:gateId="194">0</sub> );</claim-text>
<claim-text gate:gateId="195">(a07) determining that the public key PK matches the private key SK, and storing the second decrypted value K′ <sub gate:gateId="196">0 </sub>in the client as the client initial key;</claim-text>
<claim-text gate:gateId="197">(a08) encrypting the first decrypted value R′ <sub gate:gateId="198">0 </sub>using the symmetric encryption algorithm and the client initial key K′ <sub gate:gateId="199">0</sub> , to obtain an encrypted value E(R′ <sub gate:gateId="200">0</sub> ), and sending the encrypted value E(R′ <sub gate:gateId="201">0</sub> ) to the host;</claim-text>
<claim-text gate:gateId="202">(a09) obtaining the first decrypted value R′ <sub gate:gateId="203">0 </sub>by decrypting the encrypted value E(R′ <sub gate:gateId="204">0</sub> ) using the symmetric decryption algorithm and the client initial key K′ <sub gate:gateId="205">0</sub> ;</claim-text>
<claim-text gate:gateId="206">(a10) checking if the first decrypted value R′ <sub gate:gateId="207">0 </sub>is the same as the first random number R <sub gate:gateId="208">0</sub> , to determine if the client passes the initial validation;</claim-text>
<claim-text gate:gateId="209">(a11) determining the client fails in the initial validation and ending the procedure if the first decrypted value R′ <sub gate:gateId="210">0 </sub>is different from the first random number R <b gate:gateId="211">0</b> , or going to block (a12) if the first decrypted value R′ <sub gate:gateId="212">0 </sub>is the same as the first random number R <sub gate:gateId="213">0</sub> ; and</claim-text>
<claim-text gate:gateId="214">(a12) determining that the client passes the initial validation, storing the second random number K <sub gate:gateId="215">0 </sub>in the host as the host initial key, and going to block (a1).</claim-text>
</claim-text>
</claim>
<claim gate:gateId="216" id="CLM-00011" body="the one-way hash function is selected from the group consisting of a message digest algorithm (MD5), a secure hash algorithm (SHA), a message authentication code (MAC), and a cyclic redundancy check (CRC).
" claimType="dependent" num="00011" claimBackReference="of claim 7" transPhrase=", wherein " claimSize="57" claim_preamble="The non-transitory computer readable medium" claimNumber="11" depends_on="7">
<claim-text gate:gateId="217">11. The non-transitory computer readable medium of <claim-ref gate:gateId="218" idref="CLM-00007">claim 7</claim-ref> , wherein the one-way hash function is selected from the group consisting of a message digest algorithm (MD5), a secure hash algorithm (SHA), a message authentication code (MAC), and a cyclic redundancy check (CRC).</claim-text>
</claim>
<claim gate:gateId="219" id="CLM-00012" body="the symmetrical encryption algorithm is an advanced encryption standard (AES), or a data encryption standard (DES). 
" claimType="dependent" num="00012" claimBackReference="of claim 7" transPhrase=", wherein " claimSize="34" claim_preamble="The non-transitory computer readable medium" claimNumber="12" depends_on="7">
<claim-text gate:gateId="220">12. The non-transitory computer readable medium of <claim-ref gate:gateId="221" idref="CLM-00007">claim 7</claim-ref> , wherein the symmetrical encryption algorithm is an advanced encryption standard (AES), or a data encryption standard (DES). </claim-text>
</claim>
<us-patent-grant gate:gateId="222" id="us-patent-grant" date-publ="20130806" status="PRODUCTION" file="US08504826-20130806.XML" dtd-version="v4.3 2012-12-04" date-produced="20130724" lang="EN" country="US"></us-patent-grant></claims>